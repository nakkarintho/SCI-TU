Index: app/src/main/java/com/coldzify/finalproject/LoginActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.coldzify.finalproject;\r\n\r\nimport android.annotation.SuppressLint;\r\n\r\nimport android.app.Activity;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.support.annotation.NonNull;\r\nimport android.support.annotation.Nullable;\r\nimport android.support.v4.app.FragmentActivity;\r\nimport android.os.Bundle;\r\nimport android.support.v7.app.AlertDialog;\r\nimport android.support.v7.app.AppCompatActivity;\r\nimport android.text.TextUtils;\r\nimport android.util.Log;\r\nimport android.util.Patterns;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\n\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.bumptech.glide.load.DataSource;\r\nimport com.bumptech.glide.load.engine.GlideException;\r\nimport com.bumptech.glide.request.RequestListener;\r\nimport com.bumptech.glide.request.target.Target;\r\nimport com.coldzify.finalproject.Dialog.ProgressDialog;\r\nimport com.coldzify.finalproject.dataobject.UserProfile;\r\nimport com.facebook.AccessToken;\r\nimport com.facebook.CallbackManager;\r\nimport com.facebook.FacebookCallback;\r\nimport com.facebook.FacebookException;\r\nimport com.facebook.GraphRequest;\r\nimport com.facebook.GraphResponse;\r\nimport com.facebook.Profile;\r\nimport com.facebook.login.LoginManager;\r\nimport com.facebook.login.LoginResult;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.OnFailureListener;\r\nimport com.google.android.gms.tasks.OnSuccessListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.FirebaseNetworkException;\r\nimport com.google.firebase.auth.AuthCredential;\r\nimport com.google.firebase.auth.AuthResult;\r\nimport com.google.firebase.auth.FacebookAuthProvider;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\nimport com.google.firebase.storage.FirebaseStorage;\r\nimport com.google.firebase.storage.StorageReference;\r\nimport com.google.firebase.storage.UploadTask;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\npublic class LoginActivity extends AppCompatActivity {\r\n    private CallbackManager callbackManager;\r\n    //private ProfilePictureView profilePictureView;\r\n    private AccessToken accessToken;\r\n    private boolean isLoggedIn;\r\n    private Profile userProfile;\r\n    private FirebaseAuth mAuth;\r\n    private FirebaseStorage storage;\r\n    private FirebaseFirestore db;\r\n    private static final String TAG = \"LoginActivity\";\r\n    private String id, first_name, last_name, gender, birthday, email, checkType;\r\n    private FirestoreController fCon = new FirestoreController();\r\n    private Button login_button;\r\n    private ProgressDialog dialog;\r\n    private EditText email_editText, password_editText;\r\n    private TextView email_err_textView, password_err_textView;\r\n    private String m_Text = \"\";\r\n\r\n\r\n    private FirebaseAuth.AuthStateListener mAuthListener;\r\n    private String DummyEmail;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_login);\r\n        email_editText = findViewById(R.id.email_editText);\r\n        password_editText = findViewById(R.id.password_editText);\r\n        email_err_textView = findViewById(R.id.email_error_textView);\r\n        password_err_textView = findViewById(R.id.password_error_textView);\r\n        //login_button = findViewById(R.id.login_button);\r\n        //hideProgressBar();\r\n        db = FirebaseFirestore.getInstance();\r\n        mAuth = FirebaseAuth.getInstance();\r\n        accessToken = AccessToken.getCurrentAccessToken();\r\n        isLoggedIn = accessToken != null && !accessToken.isExpired();\r\n\r\n\r\n        mAuthListener = new FirebaseAuth.AuthStateListener() {\r\n            @Override\r\n            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {\r\n                if (firebaseAuth.getCurrentUser() == null) {\r\n                }\r\n            }\r\n        };\r\n\r\n        if (mAuth.getCurrentUser() != null) {\r\n            goNextActivity();\r\n        }\r\n\r\n\r\n        //profilePictureView =  findViewById(R.id.friendProfilePicture);\r\n        callbackManager = CallbackManager.Factory.create();\r\n\r\n        LoginManager.getInstance().registerCallback(callbackManager,\r\n                new FacebookCallback<LoginResult>() {\r\n                    @Override\r\n                    public void onSuccess(LoginResult loginResult) {\r\n                        Log.d(TAG, \"Login\");\r\n                        accessToken = loginResult.getAccessToken();\r\n                        handleFacebookAccessToken(accessToken);\r\n\r\n                    }\r\n\r\n                    @Override\r\n                    public void onCancel() {\r\n                        Toast.makeText(LoginActivity.this, \"Login Cancel\", Toast.LENGTH_LONG).show();\r\n                        dialog.dismiss();\r\n                    }\r\n\r\n                    @Override\r\n                    public void onError(FacebookException exception) {\r\n                        Toast.makeText(LoginActivity.this, exception.getMessage(), Toast.LENGTH_LONG).show();\r\n                        dialog.dismiss();\r\n                    }\r\n                });\r\n\r\n\r\n       /* try {\r\n            PackageInfo info = getPackageManager().getPackageInfo(\r\n                    \"com.coldzify.finalproject\",\r\n                    PackageManager.GET_SIGNATURES);\r\n            for (Signature signature : info.signatures) {\r\n                MessageDigest md = MessageDigest.getInstance(\"SHA\");\r\n                md.update(signature.toByteArray());\r\n                Log.d(\"KeyHash:\", Base64.encodeToString(md.digest(), Base64.DEFAULT));\r\n            }\r\n        } catch (PackageManager.NameNotFoundException e) {\r\n            Log.d(\"KeyHash:\", e.getMessage());\r\n        } catch (NoSuchAlgorithmException e) {\r\n            Log.d(\"KeyHash:\", e.getMessage());\r\n        }*/\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n        callbackManager.onActivityResult(requestCode, resultCode, data);\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n\r\n    public void goNextActivity() {\r\n        FirebaseFirestore.getInstance().collection(\"users\").get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                String email = email_editText.getText().toString();\r\n                if (task.isSuccessful()) {\r\n                    // List<String> list = new ArrayList<>();\r\n                    for (QueryDocumentSnapshot document : task.getResult()) {\r\n                        if (email.equals(document.getString(\"email\"))) {\r\n                            checkType = document.getString(\"userType\");\r\n                        }\r\n                        //list.add(document.getString(\"userType\"));\r\n                    }\r\n                    Log.d(TAG, \"Complete Type : \" + checkType);\r\n\r\n                    //profileIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\r\n\r\n                } else {\r\n                    Log.d(TAG, \"Error getting documents: \", task.getException());\r\n                }\r\n\r\n                if (checkType.equals(\"normal\")) {\r\n                    Intent profileIntent = new Intent(LoginActivity.this, FeedActivity.class);\r\n                    startActivity(profileIntent);\r\n                    finish();\r\n                } else if (checkType.equals(\"housekeeper\")) {\r\n                    Intent profileIntent = new Intent(LoginActivity.this, FeedActivity.class);\r\n                    startActivity(profileIntent);\r\n                    finish();\r\n                } else if (checkType.equals(\"staff\")) {\r\n                    Intent profileIntent = new Intent(LoginActivity.this, FeedActivity.class);\r\n                    startActivity(profileIntent);\r\n                    finish();\r\n                }\r\n\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void onClickLogin(View v) {\r\n\r\n        login();\r\n\r\n\r\n    }\r\n\r\n\r\n    private void handleFacebookAccessToken(AccessToken token) {\r\n        Log.d(TAG, \"handleFacebookAccessToken:\" + token);\r\n\r\n        AuthCredential credential = FacebookAuthProvider.getCredential(token.getToken());\r\n        mAuth.signInWithCredential(credential)\r\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<AuthResult> task) {\r\n                        if (task.isSuccessful()) {\r\n                            // Sign in success, update UI with the signed-in user's information\r\n                            Log.d(TAG, \"signInWithCredential:success\");\r\n                            final String uid = mAuth.getUid();\r\n                            fCon.checkDuplicateUser(uid, new FirestoreCallBack() {\r\n                                @Override\r\n                                public void onQueryListComplete(ArrayList<?> list) {\r\n                                }\r\n\r\n                                @Override\r\n                                public void onCheckDuplicateComplete(boolean isDuplicate) {\r\n                                    if (!isDuplicate) {\r\n                                        //Toast.makeText(getApplicationContext(),\"aaa\",Toast.LENGTH_SHORT).show();\r\n                                        getDataProfile();\r\n                                    } else {\r\n                                        dialog.dismiss();\r\n                                        goNextActivity();\r\n                                    }\r\n                                }\r\n                            });\r\n                        } else {\r\n                            // If sign in fails, display a message to the user.\r\n                            Log.w(TAG, \"signInWithCredential:failure\", task.getException());\r\n\r\n                            dialog.dismiss();\r\n                            Toast.makeText(LoginActivity.this, \"Authentication failed.\",\r\n                                    Toast.LENGTH_SHORT).show();\r\n                            //updateUI(null);\r\n                        }\r\n\r\n                        // ...\r\n                    }\r\n                });\r\n    }\r\n\r\n    public void getDataProfile() {\r\n        GraphRequest request = GraphRequest.newMeRequest(\r\n                AccessToken.getCurrentAccessToken(), new GraphRequest.GraphJSONObjectCallback() {\r\n                    @Override\r\n                    public void onCompleted(JSONObject object, GraphResponse response) {\r\n\r\n                        if (response.getError() != null) {\r\n                            dialog.dismiss();\r\n                            Toast.makeText(getBaseContext(), response.getError().getErrorMessage(), Toast.LENGTH_LONG).show();\r\n                        } else {\r\n\r\n                            id = object.optString(\"id\");\r\n                            first_name = object.optString(\"first_name\");\r\n                            last_name = object.optString(\"last_name\");\r\n                            gender = object.optString(\"gender\");\r\n                            birthday = object.optString(\"birthday\");\r\n                            email = response.getJSONObject().optString(\"email\");\r\n\r\n                            String urlPic;\r\n                            try {\r\n                                urlPic = object.getJSONObject(\"picture\").getJSONObject(\"data\").getString(\"url\");\r\n                                downloadUserPicture(urlPic);\r\n                            } catch (JSONException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            //UserProfile user = new UserProfile(id,name,gender,email,birthday,)\r\n\r\n                        }\r\n                    }\r\n                });\r\n\r\n        Bundle parameters = new Bundle();\r\n        parameters.putString(\"fields\", \"first_name,last_name,gender,email,birthday,picture.type(normal)\");\r\n        request.setParameters(parameters);\r\n        request.executeAsync();\r\n    }\r\n\r\n    @SuppressLint(\"CheckResult\")\r\n    private void downloadUserPicture(String url) {\r\n        GlideApp.with(this)\r\n                .asBitmap()\r\n                .load(url)\r\n                .listener(new RequestListener<Bitmap>() {\r\n                    @Override\r\n                    public boolean onLoadFailed(@Nullable GlideException e, Object model, Target<Bitmap> target, boolean isFirstResource) {\r\n                        Log.w(TAG, \"Error: \", e);\r\n                        dialog.dismiss();\r\n                        return false;\r\n                    }\r\n\r\n                    @Override\r\n                    public boolean onResourceReady(Bitmap bitmap, Object model, Target<Bitmap> target, DataSource dataSource, boolean isFirstResource) {\r\n                        uploadUserPicture(bitmap);\r\n\r\n                        return false;\r\n                    }\r\n                }).submit();\r\n\r\n\r\n    }\r\n\r\n    private void uploadUserPicture(Bitmap bitmap) {\r\n        String fileName = \"user_\" + id + \".jpg\";\r\n        storage = FirebaseStorage.getInstance();\r\n        StorageReference imageRef = storage.getReference().child(\"images/\").child(\"users/\" + fileName);\r\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);\r\n        byte[] data = baos.toByteArray();\r\n        UploadTask uploadTask = imageRef.putBytes(data);\r\n\r\n        uploadTask.addOnFailureListener(new OnFailureListener() {\r\n            @Override\r\n            public void onFailure(@NonNull Exception exception) {\r\n                Log.w(TAG, \"Error: \", exception);\r\n            }\r\n        }).addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {\r\n            @Override\r\n            public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\r\n                String picName = taskSnapshot.getMetadata().getName();\r\n                final UserProfile user = new UserProfile(mAuth.getUid(), first_name, last_name, email, picName, \"normal\", \"test\");\r\n                addUser(user);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void addUser(final UserProfile user) {\r\n        db.collection(\"users\").document(user.getUid())\r\n                .set(user)\r\n                .addOnSuccessListener(new OnSuccessListener<Void>() {\r\n                    @Override\r\n                    public void onSuccess(Void aVoid) {\r\n                        Log.d(TAG, \"User : \" + user.getFirstname() + \" successfully written!\");\r\n                        dialog.dismiss();\r\n                        goNextActivity();\r\n                        //System.out.println(\"Success adding id :\"+uid);\r\n\r\n                    }\r\n                })\r\n                .addOnFailureListener(new OnFailureListener() {\r\n                    @Override\r\n                    public void onFailure(@NonNull Exception e) {\r\n                        dialog.dismiss();\r\n                        Log.w(TAG, \"Error adding user \", e);\r\n                        //System.out.println(e.getMessage());\r\n                    }\r\n                });\r\n    }\r\n\r\n\r\n    private void login() {\r\n        showProgressDialog();\r\n        LoginManager.getInstance().logInWithReadPermissions(this, Arrays.asList(\r\n                \"public_profile\", \"user_gender\", \"email\"));\r\n    }\r\n\r\n    private void showProgressDialog() {\r\n        dialog = new ProgressDialog();\r\n        dialog.show(getSupportFragmentManager(), \"Progress\");\r\n\r\n    }\r\n\r\n    public void onLoginWithEmail(View view) {\r\n        String email = email_editText.getText().toString();\r\n        String password = password_editText.getText().toString();\r\n        showProgressDialog();\r\n        if (validateForm()) {\r\n            signIn(email, password);\r\n        } else {\r\n            dialog.dismiss();\r\n        }\r\n    }\r\n\r\n    private void signIn(String email, String password) {\r\n        mAuth.signInWithEmailAndPassword(email, password)\r\n                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<AuthResult> task) {\r\n                        dialog.dismiss();\r\n                        if (task.isSuccessful()) {\r\n                            // Sign in success, update UI with the signed-in user's information\r\n                            Log.d(TAG, \"loginUserWithEmail:success\");\r\n                            goNextActivity();\r\n\r\n                        } else {\r\n                            // If sign in fails, display a message to the user.\r\n\r\n                            Log.w(TAG, \"loginUserWithEmail:failure\", task.getException());\r\n\r\n                            if (task.getException() instanceof FirebaseAuthInvalidCredentialsException) {\r\n                                password_err_textView.setVisibility(View.VISIBLE);\r\n                            } else if (task.getException() instanceof FirebaseNetworkException) {\r\n                                Toast.makeText(getApplicationContext(), \"ไม่สามารถเชื่อมมต่อได้\", Toast.LENGTH_LONG).show();\r\n                            } else {\r\n                                email_err_textView.setVisibility(View.VISIBLE);\r\n                            }\r\n\r\n                        }\r\n\r\n                        // ...\r\n                    }\r\n                });\r\n    }\r\n\r\n    private boolean validateForm() {\r\n        clearErrorText();\r\n\r\n        String email = email_editText.getText().toString();\r\n        String password = password_editText.getText().toString();\r\n\r\n\r\n        if (!isValidEmail(email)) {\r\n            email_err_textView.setVisibility(View.VISIBLE);\r\n\r\n            return false;\r\n        }\r\n        if (password.length() == 0) {\r\n            password_err_textView.setVisibility(View.VISIBLE);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private void clearErrorText() {\r\n        email_err_textView.setVisibility(View.INVISIBLE);\r\n        password_err_textView.setVisibility(View.INVISIBLE);\r\n\r\n    }\r\n\r\n    public static boolean isValidEmail(CharSequence target) {\r\n        return (!TextUtils.isEmpty(target) && Patterns.EMAIL_ADDRESS.matcher(target).matches());\r\n    }\r\n\r\n    public void onClickSignUp(View view) {\r\n        Intent intent = new Intent(this, SignUpActivity.class);\r\n        startActivity(intent);\r\n\r\n    }\r\n\r\n    public void onClickResetPass(View view) {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(\"Reset Password\");\r\n        builder.setMessage(\"Please Input Your Email\");\r\n\r\n// Set up the input\r\n        final EditText input = new EditText(this);\r\n// Specify the type of input expected; this, for example, sets the input as a password, and will mask the text\r\n        builder.setView(input);\r\n\r\n// Set up the buttons\r\n        builder.setPositiveButton(\"OK\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                m_Text = input.getText().toString();\r\n                DummyEmail = m_Text;\r\n                Log.d(\"email\", m_Text);\r\n            }\r\n        });\r\n        builder.show();\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/coldzify/finalproject/LoginActivity.java	(revision b8f157ed68945883c39436ef721a6dd28098a450)
+++ app/src/main/java/com/coldzify/finalproject/LoginActivity.java	(date 1611726360522)
@@ -80,10 +80,6 @@
     private TextView email_err_textView, password_err_textView;
     private String m_Text = "";
 
-
-    private FirebaseAuth.AuthStateListener mAuthListener;
-    private String DummyEmail;
-
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -99,15 +95,6 @@
         accessToken = AccessToken.getCurrentAccessToken();
         isLoggedIn = accessToken != null && !accessToken.isExpired();
 
-
-        mAuthListener = new FirebaseAuth.AuthStateListener() {
-            @Override
-            public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {
-                if (firebaseAuth.getCurrentUser() == null) {
-                }
-            }
-        };
-
         if (mAuth.getCurrentUser() != null) {
             goNextActivity();
         }
@@ -452,7 +439,7 @@
 
     }
 
-    public void onClickResetPass(View view) {
+    public void PassResetViaEmail(View view) {
         AlertDialog.Builder builder = new AlertDialog.Builder(this);
         builder.setTitle("Reset Password");
         builder.setMessage("Please Input Your Email");
@@ -467,11 +454,9 @@
             @Override
             public void onClick(DialogInterface dialog, int which) {
                 m_Text = input.getText().toString();
-                DummyEmail = m_Text;
                 Log.d("email", m_Text);
             }
         });
         builder.show();
-
     }
 }
